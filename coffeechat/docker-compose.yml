
services:
  chat-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chat-server
    ports:
      - "8080:8080"
      - "9999:9999"
    networks:
      - chat-net
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: dev
      JAVA_OPTS: "-Xmx512m -Xms512m"
    volumes:
      - ./logs:/logs
      - ./dumps:/dumps
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  mysql:
    image: mysql:8.0
    container_name: chat-mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    networks:
      - chat-net
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    container_name: chat-mongo
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    networks:
      - chat-net
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand('ping').ok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: chat-redis
    ports:
      - "6379:6379"
    networks:
      - chat-net
    env_file:
      - .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: [ "CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: chat-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - chat-net
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - chat-net

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - chat-net

  influxdb:
    image: influxdb:2.0
    ports:
      - "8086:8086"
    env_file:
      - .env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_INIT_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
    networks:
      - chat-net


volumes:
  mysql-data:
  mongo-data:
  rabbitmq-data:
  grafana-data:
  influxdb-data:

networks:
  chat-net:
